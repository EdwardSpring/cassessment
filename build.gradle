buildscript {
    ext {
        springBootVersion = '3.2.2'
        springDependencyManagementVersion = '1.1.4'
        liquibaseVersion = '4.23.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    group =  'com.casumo'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    archiveFileName = 'service.jar'
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'org.mapstruct:mapstruct-jdk8:1.4.2.Final'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'

}

testing {
    suites {
        configureEach {
            useJUnitJupiter()
        }

        test {
            dependencies {
                implementation("org.springframework.boot:spring-boot-starter-test") {
                    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
                }
            }
        }
    }
}

sourceSets {
    test {
        resources.srcDirs = ['src/test/resources']
    }
}